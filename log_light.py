import os, re, requests
import subprocess
import time
import cv2
import numpy as np
import pytesseract

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn Tesseract (n·∫øu c·∫ßn, thay ƒë·ªïi t√πy h·ªá ƒëi·ªÅu h√†nh)
# V√≠ d·ª•: pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

def run_scrcpy_background(display=True):
    """Ch·∫°y scrcpy ·ªü ch·∫ø ƒë·ªô n·ªÅn."""
    if display:
        process = subprocess.Popen(["scrcpy", "--stay-awake"],
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    else:
        process = subprocess.Popen(["scrcpy", "--no-display", "--stay-awake"],
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    print(f"scrcpy ch·∫°y ng·∫ßm v·ªõi PID: {process.pid}")
    return process

# B·∫£ng chuy·ªÉn ƒë·ªïi ti·∫øng Vi·ªát c√≥ d·∫•u sang ki·ªÉu Telex 
telex_map = {
    "√†": "af", "√°": "as", "·∫£": "ar", "√£": "ax", "·∫°": "aj",
    "√®": "ef", "√©": "es", "·∫ª": "er", "·∫Ω": "ex", "·∫π": "ej",
    "√¨": "if", "√≠": "is", "·ªâ": "ir", "ƒ©": "ix", "·ªã": "ij",
    "√≤": "of", "√≥": "os", "·ªè": "or", "√µ": "ox", "·ªç": "oj",
    "√π": "uf", "√∫": "us", "·ªß": "ur", "≈©": "ux", "·ª•": "uj",
    "·ª≥": "yf", "√Ω": "ys", "·ª∑": "yr", "·ªπ": "yx", "·ªµ": "yj",
    "√¢": "aa", "·∫ß": "aaf", "·∫•": "aas", "·∫©": "aar", "·∫´": "aax", "·∫≠": "aaj",
    "√™": "ee", "·ªÅ": "eef", "·∫ø": "ees", "·ªÉ": "eer", "·ªÖ": "eex", "·ªá": "eej",
    "√¥": "oo", "·ªì": "oof", "·ªë": "oos", "·ªï": "oor", "·ªó": "oox", "·ªô": "ooj",
    "∆°": "ow", "·ªù": "owf", "·ªõ": "ows", "·ªü": "owr", "·ª°": "owx", "·ª£": "owj",
    "∆∞": "uw", "·ª´": "uwf", "·ª©": "uws", "·ª≠": "uwr", "·ªØ": "uwx", "·ª±": "uwj",
    "ƒÉ": "aw", "·∫±": "awf", "·∫Ø": "aws", "·∫≥": "awr", "·∫µ": "awx", "·∫∑": "awj",
    "ƒë": "dd",
    "√Ä": "AF", "√Å": "AS", "·∫¢": "AR", "√É": "AX", "·∫†": "AJ",
    "√à": "EF", "√â": "ES", "·∫∫": "ER", "·∫º": "EX", "·∫∏": "EJ",
    "√å": "IF", "√ç": "IS", "·ªà": "IR", "ƒ®": "IX", "·ªä": "IJ",
    "√í": "OF", "√ì": "OS", "·ªé": "OR", "√ï": "OX", "·ªå": "OJ",
    "√ô": "UF", "√ö": "US", "·ª¶": "UR", "≈®": "UX", "·ª§": "UJ",
    "·ª≤": "YF", "√ù": "YS", "·ª∂": "YR", "·ª∏": "YX", "·ª¥": "YJ",
    "√Ç": "AA", "·∫¶": "AAF", "·∫§": "AAS", "·∫®": "AAR", "·∫™": "AAX", "·∫¨": "AAJ",
    "√ä": "EE", "·ªÄ": "EEF", "·∫æ": "EES", "·ªÇ": "EER", "·ªÑ": "EEX", "·ªÜ": "EEJ",
    "√î": "OO", "·ªí": "OOF", "·ªê": "OOS", "·ªî": "OOR", "·ªñ": "OOX", "·ªò": "OOJ",
    "∆†": "OW", "·ªú": "OWF", "·ªö": "OWS", "·ªû": "OWR", "·ª†": "OWX", "·ª¢": "OWJ",
    "ƒÇ": "AW", "·∫∞": "AWF", "·∫Æ": "AWS", "·∫≤": "AWR", "·∫¥": "AWX", "·∫∂": "AWJ",
    "∆Ø": "UW", "·ª™": "UWF", "·ª®": "UWS", "·ª¨": "UWR", "·ªÆ": "UWX", "·ª∞": "UWJ",
    "ƒê": "DD"
}

def convert_to_telex(text):
    """Chuy·ªÉn vƒÉn b·∫£n ti·∫øng Vi·ªát c√≥ d·∫•u sang ki·ªÉu Telex"""
    result = ""
    for char in text:
        if char in telex_map:
            result += telex_map[char]
        else:
            result += char
    return result

def clear_input():
    """X√≥a n·ªôi dung trong √¥ nh·∫≠p li·ªáu t·∫°i t·ªça ƒë·ªô (x, y)"""
    try:
        # Di chuy·ªÉn con tr·ªè v·ªÅ cu·ªëi d√≤ng
        subprocess.run(["adb", "shell", "input", "keyevent", "123"], check=True)  # KEYCODE_MOVE_END
        
        # X√≥a to√†n b·ªô n·ªôi dung (gi·∫£ s·ª≠ t·ªëi ƒëa 50 k√Ω t·ª±)
        for _ in range(50):
            subprocess.run(["adb", "shell", "input", "keyevent", "67"], check=True)  # KEYCODE_DEL
        print(f"‚úÖ ƒê√£ x√≥a n·ªôi dung.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi x√≥a input: {e}")

def get_available_keyboards():
    """L·∫•y danh s√°ch c√°c b√†n ph√≠m kh·∫£ d·ª•ng b·∫±ng ADB."""
    try:
        result = subprocess.run(
            ["adb", "shell", "ime", "list", "-a"],
            check=True,
            capture_output=True,
            text=True
        )
        keyboards = re.findall(r'mId=([^\s]+)', result.stdout)
        print(f"üîç Danh s√°ch b√†n ph√≠m kh·∫£ d·ª•ng: {keyboards}")
        return keyboards
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi li·ªát k√™ b√†n ph√≠m: {e.stderr}")
        return []

def set_keyboard(keyboard_id):
    """ƒê·∫∑t ph∆∞∆°ng th·ª©c nh·∫≠p (b√†n ph√≠m) b·∫±ng ADB."""
    global CURRENT_KEYBOARD
    try:
        subprocess.run(
            ["adb", "shell", "ime", "set", keyboard_id],
            check=True,
            capture_output=True,
            text=True
        )
        CURRENT_KEYBOARD = keyboard_id  # C·∫≠p nh·∫≠t b√†n ph√≠m hi·ªán t·∫°i
        print(f"‚úÖ ƒê√£ chuy·ªÉn sang b√†n ph√≠m: {keyboard_id}")
        time.sleep(1)  # Th·ªùi gian ch·ªù ƒë·ªÉ b√†n ph√≠m ƒë∆∞·ª£c √°p d·ª•ng
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi chuy·ªÉn b√†n ph√≠m: {e.stderr}")
        return False

# Kh·ªüi t·∫°o danh s√°ch b√†n ph√≠m v√† bi·∫øn flag
AVAILABLE_KEYBOARDS = get_available_keyboards()
AVOID_KEYBOARD = "com.google.android.tts/com.google.android.apps.speech.tts.googletts.settings.asr.voiceime.VoiceInputMethodService"
AVAILABLE_KEYBOARDS = [kb for kb in AVAILABLE_KEYBOARDS if kb != AVOID_KEYBOARD]
CURRENT_KEYBOARD = None  # Ban ƒë·∫ßu ch∆∞a c√≥ b√†n ph√≠m n√†o ƒë∆∞·ª£c ch·ªçn

def input_text(text, vi=False):
    """Nh·∫≠p vƒÉn b·∫£n qua ADB, t·ª± ƒë·ªông ch·ªçn b√†n ph√≠m ph√π h·ª£p."""
    try:
        # X√≥a input hi·ªán t·∫°i tr∆∞·ªõc khi nh·∫≠p
        clear_input()

        # Ki·ªÉm tra danh s√°ch b√†n ph√≠m to√†n c·ª•c
        if not AVAILABLE_KEYBOARDS:
            print("‚ùå Kh√¥ng c√≥ b√†n ph√≠m n√†o kh·∫£ d·ª•ng.")
            return False

        # X√°c ƒë·ªãnh b√†n ph√≠m mong mu·ªën
        preferred_keyboard = "com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME" if vi else next(
            (kb for kb in AVAILABLE_KEYBOARDS if kb != "com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME"), 
            AVAILABLE_KEYBOARDS[0]
        )

        # Ch·ªâ chuy·ªÉn b√†n ph√≠m n·∫øu ch∆∞a ƒë√∫ng
        if CURRENT_KEYBOARD != preferred_keyboard:
            if preferred_keyboard in AVAILABLE_KEYBOARDS:
                if not set_keyboard(preferred_keyboard):
                    print(f"‚ùå Kh√¥ng th·ªÉ chuy·ªÉn sang b√†n ph√≠m: {preferred_keyboard}")
                    return False
            else:
                print(f"‚ùå B√†n ph√≠m mong mu·ªën ({preferred_keyboard}) kh√¥ng c√≥ trong danh s√°ch: {AVAILABLE_KEYBOARDS}")
                return False

        # Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n n·∫øu c·∫ßn
        input_text_converted = convert_to_telex(text) if vi else text
        print(f"üîπ Nh·∫≠p vƒÉn b·∫£n: {text} (Telex: {input_text_converted})")

        # Thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng %s cho ADB
        adb_text = input_text_converted.replace(" ", "%s")

        # G·ª≠i l·ªánh ADB
        subprocess.run(
            ["adb", "shell", "input", "text", adb_text],
            check=True,
            capture_output=True,
            text=True
        )
        print("‚úÖ G·ª≠i th√†nh c√¥ng")
        return True
    except subprocess.CalledProcessError as e:
        error_msg = f"‚ùå L·ªói khi g·ª≠i: {e}"
        if e.stderr:
            error_msg += f"\nChi ti·∫øt: {e.stderr}"
        print(error_msg)
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False

def capture_screen(filename="screen.png"):
    """Ch·ª•p ·∫£nh m√†n h√¨nh t·ª´ thi·∫øt b·ªã Android."""
    subprocess.run(["adb", "shell", "screencap", "-p", "/sdcard/screen.png"], check=True)
    subprocess.run(["adb", "pull", "/sdcard/screen.png", filename], check=True)
    return filename

def get_screen_size():
    """L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh thi·∫øt b·ªã."""
    result = subprocess.run(["adb", "shell", "wm", "size"], capture_output=True, text=True)
    output = result.stdout.strip()
    if "Physical size:" in output:
        size = output.split(": ")[-1]
        width, height = map(int, size.split("x"))
        return width, height
    return 1080, 1920  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

def tap(x, y):
    """Ch·∫°m v√†o m√†n h√¨nh t·∫°i v·ªã tr√≠ (x, y)."""
    print(f"üîπ Ch·∫°m v√†o ({x}, {y})")
    subprocess.run(["adb", "shell", "input", "tap", str(x), str(y)], check=True)

def swipe_down(width, height, times=1):
    """Vu·ªët m√†n h√¨nh l√™n `times` l·∫ßn ƒë·ªÉ t·∫£i n·ªôi dung m·ªõi."""
    for _ in range(times):
        print("üîÑ Vu·ªët m√†n h√¨nh l√™n")
        subprocess.run(["adb", "shell", "input", "swipe", str(width // 2), str(height - 300),
                        str(width // 2), "300", "500"], check=True)
        time.sleep(1.5)

def swipe_up(width, height, times=1):
    """Vu·ªët m√†n h√¨nh xu·ªëng `times` l·∫ßn."""
    for _ in range(times):
        print("üîÑ Vu·ªët m√†n h√¨nh xu·ªëng")
        subprocess.run(["adb", "shell", "input", "swipe", str(width // 2), "300",
                        str(width // 2), str(height - 300), "500"], check=True)
        time.sleep(1.5)
        
def find_button(image_name, threshold=0.7):
    screen_path = capture_screen()
    screen = cv2.imread(screen_path, cv2.IMREAD_GRAYSCALE)

    if screen is None:
        print("‚ùå L·ªói khi ƒë·ªçc ·∫£nh m√†n h√¨nh.")
        return None

    template_path = f"img_light/{image_name}.png"
    if not os.path.exists(template_path):
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·∫´u ·∫£nh: {template_path}")
        return None

    template = cv2.imread(template_path, cv2.IMREAD_GRAYSCALE)
    if template is None:
        print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc ·∫£nh m·∫´u: {template_path}")
        return None
    # L·∫•y k√≠ch th∆∞·ªõc c·ªßa screen
    screen_height, screen_width = screen.shape
    best_match = None

    best_value = 0

    for scale in [1.0, 0.9, 0.8, 0.7]:  
        resized_template = cv2.resize(template, (0, 0), fx=scale, fy=scale)
        templ_height, templ_width = resized_template.shape
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc tr∆∞·ªõc khi g·ªçi matchTemplate
        if templ_height > screen_height or templ_width > screen_width:
            print(f"‚ö†Ô∏è K√≠ch th∆∞·ªõc m·∫´u ({templ_width}x{templ_height}) l·ªõn h∆°n m√†n h√¨nh ({screen_width}x{screen_height}), b·ªè qua scale {scale}")
            continue    
        result = cv2.matchTemplate(screen, resized_template, cv2.TM_CCOEFF_NORMED)
        _, max_val, _, max_loc = cv2.minMaxLoc(result)
        
        if max_val > best_value:
            best_value = max_val
            best_match = (max_loc, resized_template.shape[::-1])  # (x, y) v√† (w, h)

    if best_match and best_value >= threshold:
        x, y = best_match[0]
        w, h = best_match[1]

        if image_name == "home":
            screen_width, _ = get_screen_size()
            x = screen_width - w - 10  # D·ªãch v·ªÅ g√≥c ph·∫£i

        return x + w // 2, y + h // 2  # Tr·∫£ v·ªÅ t·ªça ƒë·ªô trung t√¢m n√∫t

    return None

def find_text(text_to_find="ƒêƒÉng xu·∫•t"):
    """T√¨m vƒÉn b·∫£n tr√™n m√†n h√¨nh b·∫±ng OCR v√† in debug."""
    screen_path = capture_screen()
    screen = cv2.imread(screen_path)

    if screen is None:
        print("‚ùå L·ªói khi ƒë·ªçc ·∫£nh m√†n h√¨nh.")
        return None

    gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

    # C·∫•u h√¨nh nh·∫≠n di·ªán
    custom_config = r'--oem 3 --psm 6'
    data = pytesseract.image_to_data(gray, lang='vie', config=custom_config, output_type=pytesseract.Output.DICT)

    print("üìã VƒÉn b·∫£n nh·∫≠n di·ªán ƒë∆∞·ª£c:")
    for i in range(len(data["text"])):
        text = data["text"][i].strip()
        x, y, w, h = data["left"][i], data["top"][i], data["width"][i], data["height"][i]

        if text:
            print(f"üîπ '{text}' t·∫°i ({x}, {y}) - K√≠ch th∆∞·ªõc: {w}x{h}")

        if text_to_find.lower() in text.lower():
            print(f"‚úÖ T√¨m th·∫•y '{text_to_find}' t·∫°i ({x}, {y})")
            return x + w // 2, y + h // 2

    print(f"‚ùå Kh√¥ng t√¨m th·∫•y '{text_to_find}' tr√™n m√†n h√¨nh.")
    return None

def control_app(package_name, action="start", activity=".MainActivity"):
    """
    Function ƒë·ªÉ m·ªü ho·∫∑c tho√°t ·ª©ng d·ª•ng b·∫±ng ADB.
    - package_name: T√™n g√≥i c·ªßa ·ª©ng d·ª•ng (v√≠ d·ª•: 'com.facebook.katana' cho Facebook)
    - action: 'start' ƒë·ªÉ m·ªü, 'stop' ƒë·ªÉ tho√°t
    - activity: T√™n activity ƒë·ªÉ m·ªü ·ª©ng d·ª•ng (m·∫∑c ƒë·ªãnh l√† '.MainActivity')
    """
    if action == "start":
        # L·ªánh ADB ƒë·ªÉ m·ªü ·ª©ng d·ª•ng v·ªõi activity c·ª• th·ªÉ
        command = f"adb shell am start -n {package_name}/{package_name}{activity}"
        print(f"ƒêang m·ªü ·ª©ng d·ª•ng {package_name} v·ªõi {activity}...")
        time.sleep(0.5)
    elif action == "stop":
        # L·ªánh ADB ƒë·ªÉ tho√°t ·ª©ng d·ª•ng
        command = f"adb shell am force-stop {package_name}"
        print(f"ƒêang tho√°t ·ª©ng d·ª•ng {package_name}...")
    else:
        print("H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng 'start' ho·∫∑c 'stop'.")
        return
    
    # Th·ª±c thi l·ªánh ADB
    try:
        os.system(command)
        print("Th√†nh c√¥ng!")
    except Exception as e:
        print(f"L·ªói: {e}")

def read_mail(mail):
    headers = {
        'accept': '*/*',
        'accept-language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
        'application-name': 'web',
        'application-version': '4.0.0',
        'content-type': 'application/json',
        'origin': 'https://temp-mail.io',
        'priority': 'u=1, i',
        'referer': 'https://temp-mail.io/',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        'x-cors-header': 'iaWg3pchvFx48fY',
    }

    response = requests.get(f"https://api.internal.temp-mail.io/api/v3/email/{mail}/messages", headers=headers)

    # Ki·ªÉm tra m√£ tr·∫°ng th√°i
    if response.status_code == 200:
        # Chuy·ªÉn ƒë·ªïi JSON th√†nh ƒë·ªëi t∆∞·ª£ng Python
        data = response.json()
        # print(json.dumps(data, indent=4, ensure_ascii=False))
        return data
    else:
        print(f"Y√™u c·∫ßu th·∫•t b·∫°i v·ªõi m√£ tr·∫°ng th√°i: {response.status_code}")
        print(response.text)

def get_mail(min_length=10, max_length=10):
    headers = {
        'accept': '*/*',
        'accept-language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
        'application-name': 'web',
        'application-version': '4.0.0',
        'content-type': 'application/json',
        'origin': 'https://temp-mail.io',
        'priority': 'u=1, i',
        'referer': 'https://temp-mail.io/',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        'x-cors-header': 'iaWg3pchvFx48fY',
    }

    json_data = {
        'min_name_length': min_length,
        'max_name_length': max_length,
    }

    response = requests.post('https://api.internal.temp-mail.io/api/v3/email/new', headers=headers, json=json_data)
    if response.status_code == 200 or response.status_code == 201:
        return response.json()['email']
    else:
        print(f"Y√™u c·∫ßu th·∫•t b·∫°i v·ªõi m√£ tr·∫°ng th√°i: {response.status_code}")
        return "False"
    
def get_otp(mail=""):
    solan = 0
    while(True):
        if(solan>=150): break
        boxchat = read_mail(mail)
        for i in range(0,len(boxchat),1):
            if boxchat[i]["from"] == '"Facebook" <registration@facebookmail.com>':
                # print(boxchat[i]["from"])
                if " l√† m√£ x√°c nh·∫≠n" in boxchat[i]["subject"]:
                    mxn = boxchat[i]["subject"].split(" l√† m√£ x√°c nh·∫≠n")[0]
                    if mxn:
                        return mxn 
        solan+=1
        time.sleep(0.5)

def input_text_vietnamese(text):
    """Nh·∫≠p vƒÉn b·∫£n ti·∫øng Vi·ªát b·∫±ng c√°ch copy-paste t·ª´ clipboard."""
    print(f"‚å®Ô∏è Nh·∫≠p: {text}")
    
    # ƒê·∫∑t n·ªôi dung v√†o clipboard
    subprocess.run(["adb", "shell", "am", "broadcast", "-a", "clipper.set", "--es", "text", text], check=True)

    time.sleep(1)  # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ clipboard c·∫≠p nh·∫≠t
    
    # D√°n n·ªôi dung b·∫±ng Ctrl+V (KEYCODE_PASTE)
    subprocess.run(["adb", "shell", "input", "keyevent", "279"], check=True)

def auto_register(now=None, firstname="T√†i", lastname="Phan Anh", day="31", month="12", year="2003", 
                  sex="male", phone="", email = "False", password="Khoatran2006"):
    width, height = get_screen_size()
    while(email=="False"):
        email = get_mail()
        print(email)
    # Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
    control_app("com.facebook.katana", "stop", activity=".LoginActivity")
    control_app("com.facebook.katana", "start", activity=".LoginActivity")
    time.sleep(5)

    # X√°c ƒë·ªãnh tr·∫°ng th√°i ban ƒë·∫ßu
    if not now:
        while True:
            if find_and_tap("home"):
                now = "home"
                break
            elif find_and_tap("register1"):
                now = "register1"
                break
            else:
                control_app("com.facebook.katana", "stop", activity=".LoginActivity")
                control_app("com.facebook.katana", "start", activity=".LoginActivity")
                time.sleep(5)

    # ƒêƒÉng xu·∫•t n·∫øu ·ªü trang home
    if now == "home":
        find_and_tap("logout1")
        find_and_tap("logout2")
        find_and_tap("register1")

    find_and_tap("register2")

    # ƒêi·ªÅn form ƒëƒÉng k√Ω
    input_field("register_lastname", lastname, vi=True, max_attempts=3)
    input_field("register_firstname", firstname, vi=True)
    find_and_tap("next")
    
    # Nh·∫≠p ng√†y sinh
    input_field("birthday_year", year)
    input_field("birthday_month", f"Th{month}")
    input_field("birthday_day", day)
    find_and_tap("birthday_set")
    find_and_tap("next")
    
    # Ch·ªçn gi·ªõi t√≠nh
    find_and_tap("male" if sex == "male" else "female")
    find_and_tap("next")
    
    # Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email
    if phone:
        input_field("phone", phone)
    else:
        find_and_tap("convert_email")
        input_field("email", email)
    find_and_tap("next")
    
    # Nh·∫≠p m·∫≠t kh·∫©u
    input_field("password", password)
    find_and_tap("next")
    find_and_tap("next")  # Nh·∫•n "Ti·∫øp" l·∫ßn n·ªØa n·∫øu c·∫ßn
    find_and_tap("save")
    find_and_tap("dongy")
    
    print(f"ƒêang l·∫•y m√£ t·ª´ mail: {email}")
    # X√°c nh·∫≠n m√£
    while True:
        ma = get_otp(email)
        print(f"M√£ x√°c nh·∫≠n l√†: {ma}")
        input_field("maxacnhan", ma)
        if find_and_tap("next"):
            break  # Tho√°t v√≤ng l·∫∑p n·∫øu m√£ ƒë√∫ng (gi·∫£ s·ª≠ nh·∫•n "Ti·∫øp" th√†nh c√¥ng)

    # Ch·ª•p m√†n h√¨nh v√† k·∫øt th√∫c
    time.sleep(10)
    capture_screen()
    print(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng email: {email}, Password: {password}")

# H√†m ph·ª• tr·ª£ (ƒë√£ ƒë·ªãnh nghƒ©a tr∆∞·ªõc ƒë√≥)
def find_and_tap(image_name, threshold=0.8, max_attempts=5):
    for _ in range(max_attempts):
        position = find_button(image_name, threshold)
        if position:
            tap(*position)
            print(f"‚úÖ ƒê√£ nh·∫•n v√†o '{image_name}' t·∫°i {position}")
            time.sleep(0.5)
            return True
        else:
            print(f"üîç Kh√¥ng t√¨m th·∫•y '{image_name}', vu·ªët xu·ªëng...")
            width, height = get_screen_size()
            swipe_down(width, height, times=1)
            time.sleep(1)
    print(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y '{image_name}' sau {max_attempts} l·∫ßn th·ª≠.")
    return False

def input_field(image_name, text, vi=False, threshold=0.8, max_attempts=5):
    for _ in range(max_attempts):
        position = find_button(image_name, threshold)
        if position:
            tap(*position)
            print(f"üìù ƒê√£ nh·∫•n v√†o tr∆∞·ªùng '{image_name}'")
            time.sleep(0.2)
            input_text(text, vi)
            return True
        else:
            width, height = get_screen_size()
            if image_name in ["birthday_year", "birthday_month", "birthday_day"]:
                tap(width//2,height//2)
                print(f"üîç Kh√¥ng t√¨m th·∫•y '{image_name}'")
            else:
                print(f"üîç Kh√¥ng t√¨m th·∫•y '{image_name}', vu·ªët xu·ªëng...")
                swipe_down(width, height, times=1)
                time.sleep(1)
    print(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y '{image_name}' sau {max_attempts} l·∫ßn th·ª≠.")
    return False

if __name__ == "__main__":# Ch·∫°y scrcpy ng·∫ßm
    scrcpy_process = run_scrcpy_background()
    auto_register()